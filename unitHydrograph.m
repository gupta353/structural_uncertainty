% Unit hydrograph calculation for a given node
% This routine computes the unit hydrograph at a node specified by the
% user; the user has to look at the tree-representation of of the
% link-network generated by main-script and determine the node at which 
% unit-hydrograph is required
% input: node=node-number at which unit-hydrograph has to be computed
%        vel_stream=drift velocity in streams (1-10 m/s)
%        vel_hillslope=drift velocity in hillslopes(about vel_stream/10)
%        support=time-length for which uh is to be computed (at seconds-scale)
%        GEOMORPH=a structure array geomorphology of the watershed (look at
%        the mainScript.m documentation for details)
%        GLOBAL_DATA=a structure array containing user-provided path
%        'save_dir' to directory where text files have to be saved
% output:uh=unit-hydrograph values at time-steps

function [uh]=unitHydrograph(node,vel_stream,vel_hillslope,support,GEOMORPH,GLOBAL_DATA)

net=GEOMORPH.net;
node_net=GEOMORPH.node_net;
link_net=GEOMORPH.link_net;
strahler_order=GEOMORPH.strahler_order;
ddrain_area=GEOMORPH.ddrain_area;
length_link=GEOMORPH.length_link;
length_num_mat=GEOMORPH.length_num_mat;
wt=GEOMORPH.wt;

save_dir=GLOBAL_DATA.save_dir;

persistent nodeGeo p avail_trans s_order_max ddensity
if isempty(avail_trans)
    %% error messages
    if vel_stream<=0                    % vel_stream should be greater than zero
        error('vel_stream should be greater than zero')
    elseif vel_hillslope<=0            % vel_hillslope should be greater than zero
        error('vel_hillslope should be greater than zero')
    end
    %% find the paths draining into the nodes
    [r,c]=find(node_net==node);
    common_paths=net{r(1),c(1)};        % paths draining into 'node'
    common_wt=wt(common_paths,:);
    common_sum=sum(common_wt,1);
    
    %% downstream links of a node
    if node==1
        downstream_links=[];
    else
        downstream_links=find(common_sum==length(r));
    end
    %% all relevant data in a cell-array with one cell for each path
    common_links=[];
    params=cell(length(common_paths),1);
    for i=1:length(common_paths)
        temp_common_links=MY_setdiff(...
            find(wt(common_paths(i),:)==1),downstream_links);
        params{i}(:,1)=temp_common_links';
        params{i}(:,3)=strahler_order(temp_common_links);
        params{i}(:,4)=ddrain_area(temp_common_links);
        common_links=[common_links temp_common_links];
    end
    
    common_links=unique(common_links);
    common_strahler_order=strahler_order(common_links);
    if isempty(nodeGeo)
        nodeGeo=geomorphology(common_wt(:,common_links),length_link);
    end
    common_ddrain_area=ddrain_area(common_links);
    
    %% drainage density
    %
    total_length=sum(nodeGeo{1,4}(:,3),1);
    total_area=sum(common_ddrain_area);
    ddensity=total_length/total_area/4046.86;  % 1 acre = 4046.86 m2
    %}
    %% initial state probabilities (output_variable=pa)
    %
    s_order_max=max(common_strahler_order);
    pa=zeros(s_order_max,1);
    for ord=1:s_order_max
        ind=find(common_strahler_order==ord);
        pa(ord)=sum(common_ddrain_area(ind))/total_area;
    end
    %}
    
    %% transition probabilities from a strahler-stream to higher order strahler-stream
    s_order_max=max(common_strahler_order);
    pt=zeros(s_order_max,s_order_max);
    for ord=s_order_max:-1:2
        to_order=ord;
        ind=find(ord==common_strahler_order);               % indices of links with strahler-order equal to 'ord' in array 'common_links'
        to_links=common_links(ind);                         % links with strahler-order 'ord'
        
        index=[];                                           % row (column1) and column (column2) of the 'to_links' in 'link_net'
        for i=1:length(to_links)
            [temp_row,temp_col]=find(link_net...            % row and col of links in 'link_net' with strahler-order 'ord'
                ==to_links(i));
            index=[index;[temp_row,temp_col]];
        end
        
        from_links=[];
        for j=1:size(index,1)
            from_links=[from_links,link_net(index(j,1),index(j,2)+1)];
        end
        from_links=MY_intersect(unique(from_links)...          % links draining into the links of strahler-order equal to 'ord'
            ,common_links);
        from_links=MY_setdiff(from_links,to_links);
        
        from_order=strahler_order(from_links);
        
        for k=1:length(from_order)
            pt(from_order(k),to_order)=pt(from_order(k),to_order)+1;
        end
    end
    
    for ord=1:s_order_max
        pt(ord,:)=pt(ord,:)/sum(pt(ord,:),2);
    end
    %% available transitions between states
    count=0;
    for path=1:length(common_paths)
        path_strahler_order=params{path,1}(:,3);
        path_strahler_order=sort(unique(path_strahler_order));
        for i=1:length(path_strahler_order);
            count=count+1;
            avail_trans{count}=path_strahler_order(i:end);
        end
    end
    avail_trans=uniquecell(avail_trans);
    % check if any of the transition paths conatin single stream
    trans_length=cellfun(@length,avail_trans);
    ind=find(trans_length==1);
    ind_delete=[];
    for i=1:length(ind)
        if avail_trans{ind(i)}~=s_order_max
            ind_delete=[ind_delete,ind(i)];
        end
    end
    avail_trans(ind_delete)=[];
    %% probabilities of different transitions
    %
    p=zeros(length(avail_trans),1);
    for trans_path=1:length(avail_trans)
        temp_path=avail_trans{trans_path};
        temp_p=pa(temp_path(1));
        
        for i=1:length(temp_path)-1
            from_order=temp_path(i);
            to_order=temp_path(i+1);
            temp_p=temp_p*pt(from_order,to_order);
        end
        p(trans_path)=temp_p;
    end
    %}
    %% write output to text files
    % drainage density
    filename=fullfile(save_dir,'hortons_bifurcation.txt');
    fid=fopen(filename,'a');
    fprintf(fid,'%s %s %s\n','Drainage Density=',num2str(ddensity),...
        'm/m^2','interpreter','Tex');
    %initial state probabilities
    filename=fullfile(save_dir,'initial_state_transition_probabilities.txt');
    dlmwrite(filename,pa,'\t');
    % state transition probabilities
    filename=fullfile(save_dir,'state_transition_probabilities.txt');
    dlmwrite(filename,pt,'\t');
    % avail_trans and probability of different transitions
    filename=fullfile(save_dir,'transition_probabilities.txt');
    fid=fopen(filename,'wt');
    for i=1:length(avail_trans)
        to_be_written=num2str(avail_trans{i});
        fprintf(fid,[repmat('%s ',1,length(to_be_written)) '%s \n'],...
            to_be_written,num2str(p(i)));
    end
    fclose(fid);
end
%% define mean RTD for stream and overland region of each order
mean_RTD_stream=(length_num_mat(1:s_order_max,4))/vel_stream;
mean_RTD_overland=ddensity^(-1)/(2*vel_hillslope);
%% computation of unit hydrograph
t=support;
uh_fun=cell(length(avail_trans),1);
for trans=1:length(avail_trans)
    temp_trans=avail_trans{trans};
    lambda=[1/mean_RTD_overland,1./mean_RTD_stream(temp_trans)'];
    uh_fun{trans}=expconv(lambda);
end

uh=zeros(length(t),1);
for i=1:length(uh_fun)
    temp_uh_fun=uh_fun{i};
    f_gamma=temp_uh_fun{1}(t)';
    for j=2:length(temp_uh_fun)
        f_gamma=f_gamma+temp_uh_fun{j}(t)';
    end
    uh=uh+p(i)*f_gamma;
end
% plot(uh)
clear uh_fun
end
